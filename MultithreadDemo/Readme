Swing Multithreading Example
This Java Swing application demonstrates how to perform background processing using multithreading and update the GUI safely. 
It uses SwingUtilities.invokeLater() to ensure that GUI updates are performed on the Event Dispatch Thread (EDT).

Project Overview
The application consists of a simple Swing GUI with a button and a text area.
When the button is clicked, a background thread starts a simulated task that updates the text area with progress messages.

Components
NewJFrame
Purpose: The main class that creates the Swing GUI and handles user interactions.
Constructor: Initializes the GUI components.

Methods:
btnstartActionPerformed(java.awt.event.ActionEvent evt): Starts a background thread that simulates a long-running task. Updates the text area with progress information.
How It Works

GUI Initialization:
A button (btnstart) and a text area (txtoutput) are created and laid out using GroupLayout.
The btnstart button triggers the background task when clicked.

Background Task:
When the button is clicked, a new thread is created and started.
The thread performs a loop from 1 to 100, simulating a task by sleeping for 1 second in each iteration.
Updates to the text area are made using SwingUtilities.invokeLater() to ensure thread-safe interaction with the GUI.

Example Usage
Click the "Start" button on the GUI.
The text area will display messages like "task in progress..1", "task in progress..2", etc., updating every second.

Code Explanation
Thread Management: Uses an anonymous Runnable to handle background processing.
GUI Thread Safety: Ensures that updates to the GUI (txtoutput) are made on the EDT using SwingUtilities.invokeLater().
